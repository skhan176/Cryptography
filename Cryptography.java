import java.math.BigInteger;
import java.util.Random;

public class RSA {

	public static void main(String args[]) {

		Random rand1 = new Random(System.currentTimeMillis());
		Random rand2 = new Random(System.currentTimeMillis() * 10);

		// BigInteger p = BigInteger.probablePrime(32, rand1);
		// BigInteger q = BigInteger.probablePrime(32, rand2);

		BigInteger p = new BigInteger("176553675589");
		BigInteger q = new BigInteger("176553675803");

		BigInteger n = p.multiply(q);
		// BigInteger public_key = new
		// BigInteger("842654841401595339743032989608588617309886473987361285144430662484200952432801490898355147113684546248124710281061731636297197163350364633422607405624556326777760147683855315056511397562235104005688364299381427161019720170668220938257788969859033426451911198664092046696169659969088225461560673558482441886527416813962172682154176988804070131696582197407603673742464191125108710303739744301406493178602544685064337799745754946352361877950313931775393689019276703654907030976865219506075324075901238038027379213850810264604230390060038147035171838648826742456973853798332183946922222673477606443814261150687491205511991688607015698179082834474538513410615911760520437327535949381544673680297930617569916952969778408922836110554231246964879386627759783323486003958325446667250364353562608227976953010528042363488283128082001871846984463051150242444689617533106395644556829297547036355219354133401570379503720056040817880506122301197465528764357861476451936549655227946748041532744280103229119811354023964550452623737935739844538746719432311627024937024843200576956105466529781610431960271623152607832426205061046179982060702969378343901643128331351733511398003449045199166570446536163029042763210968999482450735935813283330698058620097");
		int pubkey = 17;
		// e = public_key
		// choose e: relative prime to phiN

		BigInteger p_1 = p.subtract(new BigInteger("1"));
		BigInteger q_1 = q.subtract(new BigInteger("1"));

		BigInteger phiN = p_1.multiply(q_1);

		// BigInteger private_key0 = public_key.modInverse(phiN);

		while (true) {
			BigInteger gcd = phiN.gcd(new BigInteger("" + pubkey));

			if (gcd.equals(BigInteger.ONE))
				break;

			pubkey++;
		}

		BigInteger prvkey = new BigInteger("" + pubkey).modInverse(phiN);

		System.out.println("N:" + n);
		System.out.println("public_key:" + pubkey);
		System.out.println("private_key:" + prvkey);

		BigInteger msg = new BigInteger("78");

		System.out.println("text: " + msg);
		BigInteger cipherText = msg.modPow(new BigInteger("" + pubkey), n);
		System.out.println("cipherText: " + cipherText);
		BigInteger decipherText = cipherText.modPow(prvkey, n);
		System.out.println("decipherText: " + decipherText);

		// message^public_key mod N = cipherText

		// BigInteger cipherText = new
		// BigInteger("3170175436056389815026922396003300956040582733459522081434364126025262220173290974816041029194689600117439540293024551660493311864899294204154868398238995761904161063831551701664284165123480368701358253110020012246608905258149903459154000283846744597747681067203206408685860942562674496668653198083193244197955933111453403357312768534176308259814663577427529979886757936527529646697248863963580923919702480321089159433594458441590487693863503769747490169847035779982336154741004671500065139117214389031958816945866200400663519449811824999537358858740420475596620704691226959132984157618792004910902492428559489384057899456386059972689522579448532943982291526875822482906957081981874481075143290690854191369203555981350422951968905627581465872425670485804086962664199489322811634332841309259021757215565381028354093432227654889351411850252760531556746731982104908218956820546289370973073797634292425916109227530832128907628522028659645509879762074271085612280650783675625400849790056319104741281861241764093208653978083961540238930366790332203485730217893254509853765306951778555869360118719607153903633133989005902422929832125322054445665678552572347253397631880630313878092185288527229227192271206077714566821750604628477405211161");
		//
		// BigInteger private_key = new
		// BigInteger("50941474244226174686037953763978220678051183428418009246934964582311045093151656257168903297938719450936129338338384812144983715420984008375905282048798444310754025084608702133703772388563263300628747425597513885133231728013437001974169807271966377341937566485883846530580348432629821269053591655485061386274352362691483922049330774567624358559207364971959297586189299869034523400177068127976413821920585773856557777015372003577945340517781736493111365322581924309033539271438226748653753671920544295372167413381265366653202748607119745395819533029774813224730667140366932627181565363495983052381373650048875134933450426645781696304531863593695175494208475722639586973859052044693450349226057769840520922176459933682483214433106323294642722174491977018136074683980988330206504210903466151365001303892763851280757389210631935782013387338692580315093691033789510537831342505153206904380368913768734279839772556672108173063842116207505190590738824428474378025966953561510270917021919922564553837988201875388617393199451354259877810767488673439265316119185766020968533158574962717626192215296836319170633151368002046014578224734903943839519124791495816161008906307390208685994264891471320755582268725323714907616741713639010169567501121");

		// cipherText^d mod N = m
		// d = private_key
		// BigInteger message = cipherText.modPow(private_key, n);

		// System.out.println(q.equals(q));
		//
		// System.out.println(message);
	}

}